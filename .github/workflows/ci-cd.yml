name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  repository_dispatch:
    types: [gitlab_ci_triggered]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest scikit-learn flask flask-sqlalchemy flask-login spacy requests email-validator psycopg2-binary
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m spacy download en_core_web_sm
          
      - name: Run tests
        run: |
          pytest -v

  prepare-for-gitlab-deployment:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scikit-learn flask flask-sqlalchemy flask-login spacy requests email-validator psycopg2-binary pyyaml
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m spacy download en_core_web_sm
      
      - name: Build AI Model
        run: |
          echo "Building AI model..."
          python ai_model.py train
      
      - name: Configure GitLab Integration
        run: |
          echo "Setting up GitLab integration"
          # The GitLab token is stored in GitHub Secrets
          echo "GITLAB_TOKEN=${{ secrets.GITLAB_TOKEN }}" >> $GITHUB_ENV
      
      - name: Create GitLab CI configuration with deployment focus
        run: |
          echo "Creating GitLab CI configuration with deployment focus..."
          cat > .gitlab-ci.yml << EOF
          stages:
            - build
            - test
            - deploy
            - sync

          variables:
            GITHUB_INTEGRATION: "enabled"
            GITHUB_REPOSITORY: "${{ github.repository }}"

          build:
            stage: build
            image: python:3.10
            script:
              - pip install -r requirements.txt
              - python ai_model.py train
            artifacts:
              paths:
                - "*.py"
                - "static/"
                - "templates/"
                - "instance/"
              expire_in: 1 week

          test:
            stage: test
            image: python:3.10
            script:
              - pip install pytest scikit-learn flask flask-sqlalchemy flask-login spacy requests email-validator psycopg2-binary
              - pip install -r requirements.txt
              - python -m spacy download en_core_web_sm
              - pytest -v

          deploy:
            stage: deploy
            image: python:3.10
            script:
              - echo "Deploying application to GitLab hosting..."
              - apt-get update -qy
              - apt-get install -y curl
              - pip install gunicorn
              - mkdir -p public
              # Copy static assets to public directory for GitLab Pages
              - cp -r static public/
              - cp -r templates/* public/
              # Create a simple server startup script
              - |
                cat > start-server.sh << 'EOFS'
                #!/bin/bash
                pip install gunicorn scikit-learn flask flask-sqlalchemy flask-login spacy requests email-validator psycopg2-binary
                gunicorn --bind 0.0.0.0:$PORT --workers 4 main:app
                EOFS
              - chmod +x start-server.sh
              # Create deployment configuration file
              - |
                cat > gitlab-deploy.json << 'EOFS'
                {
                  "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
                  "deployed_by": "GitLab CI",
                  "deployed_from": "GitHub repository: $GITHUB_REPOSITORY",
                  "environment": "production",
                  "server_type": "gunicorn",
                  "port": "$PORT",
                  "workers": 4
                }
                EOFS
              # Copy deployment files to the public directory
              - cp start-server.sh gitlab-deploy.json public/
            artifacts:
              paths:
                - public
                - start-server.sh
                - gitlab-deploy.json
            environment:
              name: production
              url: https://$CI_PROJECT_PATH_SLUG.$CI_PAGES_DOMAIN
            only:
              - main

          pages:
            stage: deploy
            dependencies:
              - deploy
            script:
              - echo "Deploying to GitLab Pages..."
            artifacts:
              paths:
                - public
            only:
              - main

          sync-github:
            stage: sync
            image: python:3.10
            script:
              - echo "Syncing deployment status with GitHub..."
              - apt-get update -qy
              - apt-get install -y curl
              - |
                if [ -n "$GITHUB_TOKEN" ] && [ -n "$GITHUB_REPOSITORY" ]; then
                  # Notify GitHub that GitLab has deployed the application
                  curl -X POST \
                    -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Accept: application/vnd.github.v3+json" \
                    https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches \
                    -d '{
                      "event_type": "gitlab_deployment_completed",
                      "client_payload": {
                        "deployment_url": "https://$CI_PROJECT_PATH_SLUG.$CI_PAGES_DOMAIN",
                        "deployed_at": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                        "gitlab_project": "'$CI_PROJECT_PATH'",
                        "gitlab_pipeline": "'$CI_PIPELINE_ID'"
                      }
                    }'
                  
                  echo "GitHub notification sent successfully"
                else
                  echo "GitHub token or repository not available, skipping notification"
                fi
            only:
              - main
          EOF
          
          echo "GitLab CI configuration created successfully"
      
      - name: Update GitLab CI configurations in GitLab projects
        run: |
          echo "Updating GitLab CI configurations in GitLab projects..."
          python - << EOF
          import os
          import sys
          import json
          import requests

          GITLAB_TOKEN = os.environ.get('GITLAB_TOKEN')
          if not GITLAB_TOKEN:
              print("GitLab token not available, skipping GitLab CI update")
              sys.exit(0)

          try:
              # Read the GitLab CI configuration file
              with open('.gitlab-ci.yml', 'r') as f:
                  gitlab_ci_content = f.read()
              
              # Get GitLab projects
              headers = {
                  "Authorization": f"Bearer {GITLAB_TOKEN}",
                  "Content-Type": "application/json"
              }
              response = requests.get(
                  "https://gitlab.com/api/v4/projects",
                  headers=headers,
                  params={"membership": True}
              )
              response.raise_for_status()
              projects = response.json()
              
              # Update .gitlab-ci.yml in each GitLab project
              updated_count = 0
              for project in projects:
                  project_id = project["id"]
                  project_name = project["name"]
                  
                  try:
                      # Try to update the file first (if it exists)
                      try:
                          # Check if the file exists
                          file_check = requests.get(
                              f"https://gitlab.com/api/v4/projects/{project_id}/repository/files/.gitlab-ci.yml",
                              headers=headers,
                              params={"ref": "main"}
                          )
                          
                          if file_check.status_code == 200:
                              # File exists, update it
                              update_response = requests.put(
                                  f"https://gitlab.com/api/v4/projects/{project_id}/repository/files/.gitlab-ci.yml",
                                  headers=headers,
                                  json={
                                      "branch": "main",
                                      "content": gitlab_ci_content,
                                      "commit_message": "Update CI configuration via GitHub Actions to focus on GitLab hosting"
                                  }
                              )
                              update_response.raise_for_status()
                              print(f"Updated .gitlab-ci.yml in project {project_name}")
                              updated_count += 1
                          else:
                              # File doesn't exist, create it
                              create_response = requests.post(
                                  f"https://gitlab.com/api/v4/projects/{project_id}/repository/files/.gitlab-ci.yml",
                                  headers=headers,
                                  json={
                                      "branch": "main",
                                      "content": gitlab_ci_content,
                                      "commit_message": "Create GitLab CI configuration with deployment focus"
                                  }
                              )
                              create_response.raise_for_status()
                              print(f"Created .gitlab-ci.yml in project {project_name}")
                              updated_count += 1
                      except requests.exceptions.RequestException as e:
                          print(f"Error updating/creating .gitlab-ci.yml in project {project_name}: {str(e)}")
                          continue
                  
                  except Exception as e:
                      print(f"Error processing project {project_name}: {str(e)}")
                      continue
              
              print(f"Successfully updated {updated_count} GitLab CI configurations")
          
          except Exception as e:
              print(f"Failed to update GitLab CI configurations: {str(e)}")
              sys.exit(1)
          EOF
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      - name: Create deployment documentation 
        run: |
          echo "Creating deployment documentation..."
          mkdir -p docs
          cat > docs/gitlab-deployment.md << EOF
          # GitLab Deployment Documentation

          This application is designed to be hosted and deployed via GitLab's infrastructure.

          ## Deployment Process

          1. Code is pushed to GitHub repository
          2. GitHub Actions runs tests and triggers GitLab CI/CD
          3. GitLab CI/CD builds, tests, and deploys the application
          4. Application is hosted on GitLab's infrastructure

          ## Deployment URLs

          When deployed, the application will be available at:
          - https://\$CI_PROJECT_PATH_SLUG.\$CI_PAGES_DOMAIN (GitLab Pages)
          - Custom domain (if configured in GitLab)

          ## Server Configuration

          - Server: Gunicorn
          - Workers: 4
          - Port: Dynamic (provided by GitLab)
          - Database: PostgreSQL (configured via environment variables)

          ## Monitoring and Logging

          - Application logs are available in GitLab CI/CD pipeline
          - Additional monitoring can be configured via GitLab monitoring tools

          ## GitHub Integration

          GitHub serves as the development repository, while GitLab handles the hosting and deployment:

          - GitHub: Code repository, tests, AI model training
          - GitLab: Hosting, deployment, production environment
          EOF
          
          echo "Deployment documentation created successfully"
      
      - name: Package Application for GitLab Deployment
        run: |
          echo "Packaging application for GitLab deployment..."
          mkdir -p deployment
          
          # Include all necessary files for deployment
          cp -r *.py static templates requirements.txt deployment/
          cp .gitlab-ci.yml deployment/
          cp -r docs deployment/
          
          # Create a README for GitLab deployment
          cat > deployment/README.md << EOF
          # DevOps AI Chat System

          This application is designed to be deployed on GitLab infrastructure.
          
          ## Files
          
          - \`*.py\`: Application source code
          - \`static/\`: Static assets (CSS, JS)
          - \`templates/\`: HTML templates
          - \`requirements.txt\`: Python dependencies
          - \`.gitlab-ci.yml\`: GitLab CI/CD configuration
          - \`docs/\`: Documentation
          
          ## Deployment
          
          This application is automatically deployed via GitLab CI/CD pipeline.
          No manual steps are required for deployment.
          
          ## GitHub Integration
          
          The application source code is managed in GitHub, while the hosting and deployment
          are handled by GitLab.
          EOF
          
          # Create a requirements.txt file if it doesn't exist
          if [ ! -f requirements.txt ]; then
            cat > requirements.txt << EOF
          scikit-learn
          flask
          flask-sqlalchemy
          flask-login
          spacy
          requests
          email-validator
          psycopg2-binary
          gunicorn
          numpy
          EOF
          cp requirements.txt deployment/
          fi
          
          echo "Application packaged successfully for GitLab deployment"
      
      - name: Trigger GitLab CI/CD Pipelines for Deployment
        if: success()
        run: |
          echo "Triggering GitLab CI/CD pipelines for deployment..."
          python github_gitlab_bridge.py --direction github-to-gitlab --action trigger-pipeline --gitlab-token $GITLAB_TOKEN
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      - name: Upload Deployment Package
        uses: actions/upload-artifact@v3
        with:
          name: gitlab-deployment-package
          path: deployment/
            
      - name: Trigger GitHub Pages Deployment for UI
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: github_ci_completed
          client-payload: '{"success": true, "workflow": "${{ github.workflow }}", "run_id": "${{ github.run_id }}",
                          "deployment_type": "gitlab", "message": "Deployment to GitLab initiated successfully"}'
